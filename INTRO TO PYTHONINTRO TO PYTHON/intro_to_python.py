# -*- coding: utf-8 -*-
"""intro to python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_jU5g9G1RwCcDSc2WauvmvAJJt4aVnF6

# **INTRO TO PYTHON**

![P.png](attachment:P.png)

# The Different levels of programming languages
#### Hardware
#### Machine language 0,1 *
#### Assembly language
#### High level language like pythonِِ

![s.png](attachment:s.png)

# **Your First Program:**
"""

print("Hello World")



print("Hello world")

print('''HABIBA
ALAZHAR 
COMPUTER ''')

"""# **Variables and Simple Data Types:**"""

text = 5
print(type(text))

# Multi Line Comments.
'''My name is mahmoud hassan
Age : 90
Address : Egypt '''
print('hello every bady')

"""## Escape Sequences
![Escape_Characters_Python.jpg](attachment:Escape_Characters_Python.jpg)

"""

print("\tLanguages:\nPython\nC\nJavaScript")





# What is the expected output?
first_exp='''Hellow\\
I'm happy.\n\t*to attend
'''
print(first_exp)

"""# **Naming and Using Variables¶**

Variable names can contain **only letters, numbers, and underscores**. They can start with a letter or an underscore, but not with a number.For instance, you can call a variable **message_1 but not 1_message**.

Spaces are not allowed in variable names, but underscores can be used to separate words in variable names. For example, **greeting_message** works, but **greeting message** will cause errors.

Avoid using ***Python Keywords*** like **and , if , True and function names** as variable names that is, do not use words that Python has reserved for a particular programmatic purpose, such as the word **print**.

Variable names should be short but descriptive. For example, **name** is better than n, **student_name** is better than s_n, and **name_length** is better than length_of_persons_name.

Be careful when using the lowercase letter l and the uppercase letter O because they could be confused with the numbers 1 and 0
"""

#Name='Ahmed'
# # print(_name)
myaGe=20
print(myaGe)
#1='hello'
#print(1)

"""# **Strings**
**Strings in python are surrounded by either single quotation marks, or double quotation marks.**
"""

name = "PYTHON" 
#name='''python'''
#print(name[3])
#print(name[1])
#print(name.upper())
print(name.lower())

"""**String concatenation**"""

print('Hello'+ 'Python'+10)

print('HAbiba','Ha')

print('Hello', 'world','hi','wi',sep='#')

"""**Fstring**"""

first_name = "Ali"
last_name = "Mohamed"
full_name = f"{first_name} {last_name}"
UNV='alazhr'

print(f'My Name is {first_name} Last name {10}')

"""# **Numbers**

*Integers*

*Floats*

*Complex*
"""

# Integers
Number1 = 100
print(Number1)
# Floats
Number2 = 10.5
print(Number2)
# Complex
Number3 = 9+4j
print(Number3)

#type function
print(type(Number1))
print(type(Number2))
print(type(Number3))

"""## Casting
There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.
"""

x = int(100)   # x will be 1
y = int(3.17) # y will be 2
z = int("3") # z will be 3
print(x,y,end='\n')
print(type(z))

A = float("4.2") # A will be 4.2
S = str(3.0) # s will be '3.0'
print(A,(S,A))

"""![22.png](attachment:22.png)

## **arithmetic operators and Assignment Operators**
![9.PNG](attachment:9.PNG)
"""

# Mathematical operators in python (+ - * ** / //)
print(2 + 3)
print(2*3)
print(2**3)
print(9/2)
print(9//2)

"""When you divide any two numbers, even if they are integers that result in a whole number, you’ll **always get a float:**"""

print(2/2)

""" **Relational Operators**"""

#7>=4.1
#7<4.1
#7>3
#3<=1
#3!=3
7==4.1

#Multiple Assignment
x, y, z = 0, 1, 2
x=0
y=1
z=2
print(x)

"""# **List**

A list is a collection of items in a particular order

![list-in-python.png](attachment:list-in-python.png)
"""

li=[]
colors = ['white','blue' ,'green', 'red']
print(colors)

"""**Note** : Accessing Elements in a List Index Positions Start at 0, Not 1"""

print(colors[0])
print(colors[3])

colors[1]='black'
print(colors[1])
print(colors)

colors.append('yellow')
print(colors)

names = []
names.append('Fatma')
names.append('Amany')
names.append('mohammed')
names

# extend takes a list as an argument and appends all of the elements:
t1 = ['a', 'b', 'c']
t2 = ['d', 'e']
t1.extend(t2)
print( t2)

# Inserting Elements into a List
names.insert(3, 'Habiba')
names

# Removing an Item Using the del Statement
del names[3]
names

# Removing an Item Using the pop() Method
popped_name = names.pop()
print(popped_name)

print(names)

New_names=['Ahmed','Rana','Noha']
New_names.remove('Rana')
New_names

#Sorting a List
numbers = [5, 3, 1, 4,2] 
# numbers.sort(reverse=True) 
# numbers
numbers.sort()
numbers

# Finding the Length of a List
len(numbers)

#Avoiding Index Errors When Working with Lists
numbers[-1]

#keyword range
numbers = list(range(3, 10))
print(numbers)

even_numbers = list(range(1, 11, 2))
print(even_numbers)

names = ['mahmoud', 'ali', 'ahmed', 'mohamed']
# slicing
print(names[0:3])
print(names[0:4])

print(names[:1])
print(names[2:])
print(names[-3:])

"""**Quiz:**
students =  ['Fatma','Zainab','book']

Try to print this output:

**Fatma**

**Zain**

**k**
"""

students =  ['Fatma','Zainab','book']
print(students[0],students[1][0:4],students[2][3])
#solution

"""![image-2.png](attachment:image-2.png)

# **Tuples**

Python refers to values that cannot change as immutable, and an ***immutable*** list is called a **tuple**.
"""

t=()
l=list(t)
l.append('f')
t=tuple(l)
print(t)
dimensions = (200, 50)
print(dimensions[0])

#Error!!
dimensions[0] = 25

"""## Dictionaries

is a collection of **key-value pairs**. Each key is connected
to a value, and you can use a key to access the value associated with that key.
A key’s value can be a **number**, a **string**, a **list**, or even another **dictionary**.
**Creating a dictionary** is as simple as placing items inside curly braces {} separated by commas.

![d.png](attachment:d.png)
"""

# empty dictionary
my_dict = {}

# dictionary with integer keys
my_dict = {1: 'apple', 2: 'ball'}

# dictionary with mixed keys
my_dict = {'name': 'John', 1: [2, 4, 3]}
print(my_dict)
# using dict()
my_dict = dict({1:'apple', 2:'ball'})

"""**Accessing Elements from Dictionary**

"""

my_dict = {'Name': 'Ahmed', 'Age': 25}
# Output: Ahmed
print(my_dict['Name'])
# Output: 25
print(my_dict.get('Age'))

#Adding New Key-Value Pairs
my_dict["Address"] = 'Egypt'
my_dict["weight"] = 70
print(my_dict)

#Modifying Values in a Dictionary
my_dict['Address']= 'Monfia'
print(my_dict)

#Removing Key-Value Pairs
# del my_dict['Age']
# print(my_dict)
# delete the dictionary itself
del my_dict
print(my_dict)
# ## remove all items
# my_dict.clear()

#Looping Through a Dictionary
for key, value in my_dict.items():
     print(f"\nKey: {key}")
     print(f"Value: {value}")

"""### Quiz: your turn to shine!
**dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}**
Try to print this output:
**{1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}**
using method **update()

"""

dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
dic4.update(dic1)
dic4.update(dic2)
dic4.update(dic3)
print(dic4)

"""## Great job!!
* #### let's take a break

# **User Input**
"""

message = input("Tell me something: ")
print(message)

name = input("Please enter your name: ")
print(f"\nHello, {name}!")

"""**When you use the input() function, Python interprets everything the user enters as a string**."""

age = int(input("How old are you? "))
print(type(age))

#Error 
age = input("How old are you? ")
if age >= 18 :
    print('you can vote')

#Using int() to Accept Numerical Input
age = input("How old are you? ")
age = int(age)
if age >= 18:
    print('you can vote!')
else:
    print('you can not vote')

"""## Asking Questions 
1. Take some kind of input from a person.
2. Change it.
3. Print out something to show how it changed.

"""

print ("How old are you?")
age = input()
print ("How tall are you?")
height =input()
print ("How much do you weigh?")
weight =input()
print (f"So, you're {age} old, {height} tall and {weight} heavy.")

"""## if Statements
Simple if Statements


**if conditional_test :**
   
   
    do something
**elif conditional_test :**
   
   
    do something
**else :**

    do something

![c.png](attachment:c.png)
"""

'''In this program, 
we check if the number is positive or
negative or zero and 
display an appropriate message'''

num = -3.4

# Try these two variations as well:
# num = 0
# num = -4

if num > 0:
    print("Positive number")
elif num == 0:
    print("Zero")
else:
    print("Negative number")

'''In this program, we input a number
check if the number is positive or
negative or zero and display
an appropriate message
This time we use nested if statement'''

num = float(input("Enter a number: "))
if num >= 0:
    if num == 0:
        print("Zero")
    else:
        print("Positive number")
else:
    print("Negative number")

"""# **Loops**

![u.png](attachment:u.png)

# 1- while Loops

##**print( 1 2 3 4 5)**
"""

number = 1
while number <= 5:
    print(number)
    number += 1

"""### Quiz: your turn to shine!
**Program to add natural**
**numbers up to**
**sum = 1+2+3+...+n**

**To take input from the user,**
**n = int(input("Enter n: "))**
"""

n=int(input("Enter n:"))
counter=1
sum=0
while counter<=n:
    sum+=counter
    counter+=1
print(sum)

"""## 2- for loop"""

# Program to find the sum of all numbers stored in a list

# List of numbers
numbers = [6, 5, 3, 8, 4, 2, 5, 4, 11]

# variable to store the sum
sum = 0

# iterate over the list
for val in numbers:
    sum = sum+val

print("The sum is", sum)

# Program to iterate through a list using indexing

pl = ['cat', 'abble', 'car']

# iterate over the list using index
for i in range(len(pl)):
    print("I like", pl[i])   0 1 2

# program to display student's marks from record
student_name = 'Asmaa'

marks = {'Mohamed': 90, 'Asmaa': 55, 'Fatma': 77}

for student in marks:
    if student == student_name:
        print(marks[student])
        break
else:
    print('No entry with that name found.')

"""## Defining a Function
**In Python, a function is a group of related statements that performs a specific task.**
"""

def Hi(name):
    """
    This function Hi to
    the person passed in as
    a parameter
    """
    print("Hello, " + name + ". Good morning!")

Hi('Fatma')

print(Hi('Habiba'))

def absolute_value(num):
    """This function returns the absolute
    value of the entered number"""

    if num >= 0:
        return num
    else:
        return -num


print(absolute_value(2))

print(absolute_value(-4))

"""**What is the expected output?**"""

def my_func():
	x = 10
	print("Value inside function:",x)

x = 20
my_func()
print("Value outside function:",x)

"""## Python Built-in Functions
**Python has several functions that are readily available for use. These functions are called built-in functions. In this reference page, you will find all the built-in functions in Python.**
"""

#exaple
#Mathmatical Method
#sum

# l=[23,23,19,45]
print(pow(1,2))

"""## Arguments and Parameters
**Function arguments can have default values in Python.**

**We can provide a default value to an argument by using the assignment operator (=). Here is an example.**
"""

def Hi(name, massage="Good morning!"):
    """
    This function greets to
    the person with the
    provided message.

    If the message is not provided,
    it defaults to "Good
    morning!"
    """

    print("Hello", name + ', ' + massage)


Hi("Mohamed")
Hi("Ahmed", "How do you do?")

# 2 keyword arguments
Hi(name = "Ahmed",massage= "How do you do?")

# 2 keyword arguments (out of order)
Hi( "How do you do?","Fatma")

def print_average(*values):
    print(sum(values)/len(values))
print_average(1, 2, 3, 4)

"""## Recursive Function

*In Python, we know that a function can call other functions. It is even possible for the function to call itself.*

![image.png](attachment:image.png)
"""

def factorial(x):
    """This is a recursive function
    to find the factorial of an integer"""

    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))


num = 3
print("The factorial of", num, "is", factorial(num))

"""![image.png](attachment:image.png)

### Quiz: your turn to shine!

**Write a function called sum that displays the sum of two Numbers:**

# Classes and Objects

**A class is a blueprint for the object.**

We can think of class as a sketch of a parrot with labels. It contains all the details about the name, colors, size etc.
Based on these descriptions, we can study about the parrot. Here, a parrot is an object

**An object (instance) is an instantiation of a class. When class is defined, only the description for the object is defined. Therefore, no memory or storage is allocated.**

![image.png](attachment:image.png)
"""

class Person:
    def __init__(self, name, sex, profession):
        # data members (instance variables)
        self.name = name
        self.sex = sex
        self.profession = profession

    # Behavior (instance methods)
    def show(self):
        print('Name:', self.name, 'Sex:', self.sex, 'Profession:', self.profession)

    # Behavior (instance methods)
    def work(self):
        print(self.name, 'working as a', self.profession)

# create object of a class
jessa = Person('Jessa', 'Female', 'Software Engineer')

# call methods
jessa.show()
jessa.work()

"""![83.png](attachment:83.png)"""

# Class for Dog
class Dog:
   
    # Class Variable
    animal = 'dog'            
   
    # The init method or constructor
    def __init__(self, breed, color):
     
        # Instance Variable    
        self.breed = breed
        self.color = color       
    
# Objects of Dog class
Rodger = Dog("Pug", "brown")
Buzo = Dog("Bulldog", "black")
 
print('Rodger details:')  
print('Rodger is a', Rodger.animal)
print('Breed: ', Rodger.breed)
print('Color: ', Rodger.color)
 
print('\nBuzo details:')  
print('Buzo is a', Buzo.animal)
print('Breed: ', Buzo.breed)
print('Color: ', Buzo.color)
 
# Class variables can be accessed using class
# name also
print("\nAccessing class variable using class name")
print(Dog.animal)

"""## Inheritance Class

**Inheritance allows us to define a class that inherits all the methods and properties from another class.**

**Parent class** is the class being inherited from, also called base class.

**Child class** is the class that inherits from another class, also called derived class.
![image.png](attachment:image.png)

### Create a Parent Class
"""

#Create a class named Person
# super class or Base class
class Person:
    def __init__(self, name):
        self.name = name

    def greet(self):
        return f"Hi, it's {self.name}"

class Employee(preson):
    def __init__(self, name, job_title):
        super().__init__(name)
        self.job_title = job_title

employee = Employee('Mohmed', 'Engineering')
print(employee.greet())

"""# Thank you😊🥱"""